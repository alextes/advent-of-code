// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var $$Array = require("bs-platform/lib/js/array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");

function lastIndex(nums, i) {
  return (nums.length - 1 | 0) === i;
}

function getPair(nums, i) {
  var len = nums.length;
  return /* tuple */[
          Caml_array.caml_array_get(nums, i),
          Caml_array.caml_array_get(nums, Caml_int32.mod_(i + 1 | 0, len))
        ];
}

function getPair2(nums, i) {
  var len = nums.length;
  return /* tuple */[
          Caml_array.caml_array_get(nums, i),
          Caml_array.caml_array_get(nums, Caml_int32.mod_(i + (len / 2 | 0) | 0, len))
        ];
}

function sumPairs(pairs) {
  return $$Array.map((function (param) {
                var a = param[0];
                var match = a === param[1];
                if (match) {
                  return a;
                } else {
                  return 0;
                }
              }), pairs);
}

function sumNums(nums) {
  return $$Array.fold_left((function (a, b) {
                return a + b | 0;
              }), 0, nums);
}

function getFirst(arr) {
  return Caml_array.caml_array_get(arr, 0);
}

var nums = $$Array.map(Caml_format.caml_int_of_string, Caml_array.caml_array_get(Fs.readFileSync("src/input-1", "utf8").split("\n"), 0).split(""));

console.log(sumNums(sumPairs($$Array.mapi((function (i, _) {
                    return getPair(nums, i);
                  }), nums))));

var nums$1 = $$Array.map(Caml_format.caml_int_of_string, Caml_array.caml_array_get(Fs.readFileSync("src/input-1", "utf8").split("\n"), 0).split(""));

console.log(sumNums(sumPairs($$Array.mapi((function (i, _) {
                    return getPair2(nums$1, i);
                  }), nums$1))));

exports.lastIndex = lastIndex;
exports.getPair = getPair;
exports.getPair2 = getPair2;
exports.sumPairs = sumPairs;
exports.sumNums = sumNums;
exports.getFirst = getFirst;
/* nums Not a pure module */
