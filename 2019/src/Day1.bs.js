// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Float = require("bs-platform/lib/js/belt_Float.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var ParseError = Caml_exceptions.create("Day1-AdventOfCode.ParseError");

var moduleMasses = Belt_Array.map(Belt_Array.keep(Fs.readFileSync("./src/input1", "utf8").split("\n"), (function (str) {
            return str !== "";
          })), (function (strNum) {
        var match = Belt_Float.fromString(strNum);
        if (match !== undefined) {
          return match;
        } else {
          throw [
                ParseError,
                "Failed to parse input"
              ];
        }
      }));

function getFuelForModule(mass) {
  return Math.floor(mass / 3.0) - 2.0;
}

function sum(__x) {
  return Belt_Array.reduce(__x, 0.0, (function (acc, num) {
                return acc + num;
              }));
}

var answer = String(sum(Belt_Array.map(moduleMasses, getFuelForModule)));

console.log("Part 1: " + answer);

function getFuelForModule$prime(mass) {
  var requiredFuel = Math.floor(mass / 3.0) - 2.0;
  if (requiredFuel <= 0.0) {
    return 0.0;
  } else {
    return requiredFuel + getFuelForModule$prime(requiredFuel);
  }
}

var answer$1 = String(sum(Belt_Array.map(moduleMasses, getFuelForModule$prime)));

console.log("Part 2: " + answer$1);

exports.ParseError = ParseError;
exports.moduleMasses = moduleMasses;
exports.getFuelForModule = getFuelForModule;
exports.sum = sum;
exports.getFuelForModule$prime = getFuelForModule$prime;
/* moduleMasses Not a pure module */
