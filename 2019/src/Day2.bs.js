// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Block = require("bs-platform/lib/js/block.js");
var Belt_Int = require("bs-platform/lib/js/belt_Int.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var opCodes = Belt_List.map(Belt_List.fromArray(Fs.readFileSync("./src/input2", "utf8").split(",")), (function (strNum) {
        return Belt_Option.getExn(Belt_Int.fromString(strNum));
      }));

var ParseError = Caml_exceptions.create("Day2-AdventOfCode.ParseError");

function parseOpcodes(rawOpcodes) {
  var setCount = 0;
  var $$break = false;
  var opCodes = [];
  while(!$$break) {
    var instructionCode = Belt_List.getExn(rawOpcodes, (setCount << 2));
    var switcher = instructionCode - 1 | 0;
    if (switcher === 0 || switcher === 1) {
      if (switcher !== 0) {
        var inputPositionA = Belt_List.getExn(rawOpcodes, (setCount << 2) + 1 | 0);
        var inputPositionB = Belt_List.getExn(rawOpcodes, (setCount << 2) + 2 | 0);
        var outputPosition = Belt_List.getExn(rawOpcodes, (setCount << 2) + 3 | 0);
        opCodes.push(/* Multiply */Block.__(1, [
                inputPositionA,
                inputPositionB,
                outputPosition
              ]));
        setCount = setCount + 4 | 0;
      } else {
        var inputPositionA$1 = Belt_List.getExn(rawOpcodes, (setCount << 2) + 1 | 0);
        var inputPositionB$1 = Belt_List.getExn(rawOpcodes, (setCount << 2) + 2 | 0);
        var outputPosition$1 = Belt_List.getExn(rawOpcodes, (setCount << 2) + 3 | 0);
        opCodes.push(/* Add */Block.__(0, [
                inputPositionA$1,
                inputPositionB$1,
                outputPosition$1
              ]));
        setCount = setCount + 4 | 0;
      }
    } else {
      if (switcher !== 98) {
        throw [
              ParseError,
              "Unknown instruction code"
            ];
      }
      opCodes.push(/* Halt */0);
      $$break = true;
    }
  };
  return Belt_List.fromArray(opCodes);
}

function runOpCodes(state, _opCodes) {
  while(true) {
    var opCodes = _opCodes;
    var match = Belt_List.headExn(opCodes);
    if (typeof match === "number") {
      return state;
    } else if (match.tag) {
      var numA = Belt_Array.getExn(state, match[0]);
      var numB = Belt_Array.getExn(state, match[1]);
      var sum = Caml_int32.imul(numA, numB);
      Belt_Array.setExn(state, match[2], sum);
      _opCodes = Belt_List.tailExn(opCodes);
      continue ;
    } else {
      var numA$1 = Belt_Array.getExn(state, match[0]);
      var numB$1 = Belt_Array.getExn(state, match[1]);
      var sum$1 = numA$1 + numB$1 | 0;
      Belt_Array.setExn(state, match[2], sum$1);
      _opCodes = Belt_List.tailExn(opCodes);
      continue ;
    }
  };
}

var input = Belt_List.toArray(opCodes);

console.log(input);

var instructions = parseOpcodes(opCodes);

console.log(instructions);

Belt_Array.setExn(input, 1, 12);

Belt_Array.setExn(input, 2, 2);

var twelveOTwoOpCodes = runOpCodes(input, instructions);

console.log(twelveOTwoOpCodes);

exports.opCodes = opCodes;
exports.ParseError = ParseError;
exports.parseOpcodes = parseOpcodes;
exports.runOpCodes = runOpCodes;
exports.twelveOTwoOpCodes = twelveOTwoOpCodes;
/* opCodes Not a pure module */
